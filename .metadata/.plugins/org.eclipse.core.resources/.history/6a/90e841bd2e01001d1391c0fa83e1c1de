package btree;

import java.util.Vector;

public class BTree {
	class Node{
		// KnotenTypen
		public static final int LEAF_PAGE = 0;
		public static final int NODE_PAGE = 1;
		
		// SucherErgibnisse
		public static final int KEY_FOUND = -1;
		public static final int KEY_NOT_FOUND = -2;
		
		Node parent = null;
		Vector<Comparable> elements;
		Vector<Node> pointers;
		private int nodetype;
		
		public Node (int nodetype) {
			this.nodetype = nodetype;
			elements = new Vector<Comparable>();
			pointers = (nodetype = NODE_PAGE ? new Vector<Node>(): null);
		}
		
		public void setNodeType(int nodetype) {
			this.nodetype = nodetype;
			if (pointers == null && nodetype == NODE_PAGE)
				pointers = new Vector<Node>();
		}
		
		public Comparable getElement(int index) {
			return elements.get(index);
		}
		
		public Node getPointer(int index) {
			return pointers.get(index);
		}
		public int getNumElements() {
			return elements.size();
		}
		public Node getParent() {
			return parent;
		}
		public boolean insertIntoNode(Comparable element, Node leftNode, Node rightNode) {
			boolean done = false;
			for (int i=0; i<elements.size(); i++) {
				int result = elements.get(i).compareTo(element);
				if (result == 0) {
					done = true;
					break;
				} else if (result > 0){
					elements.insertElementAt(element,i);
					if (rightNode != null) {
						pointers.insertElementAt(rightNode, i+1);
						rightNode.parent = this;
					}
					done = true;
					break;
				}
			}
			if (!done)
				// element kommt ans Ende
			if (leftNode != null && pointers.isEmpty()) {
				pointers.add(leftNode);
				leftNode.parent = this;
			}
			if (rightNode != null) {
				pointers.add(rightNode);
				rightNode.parent = this;
			}
			return elements.size() > degree*2;
			
		}
		public int findKeyInNode(Comparable element, Comparable[] key) {
			for (int i =0; i<elements.size(); i++) {
				int result = elements.get(i).compareTo(element);
				if (result == 0) {
					key[0] = elements.get(i);
					return KEY_FOUND;
				}
				else if (result > 0) {
					return nodetype == NODE_PAGE ? i : KEY_NOT_FOUND;
				}
			}
			return (nodetype == NODE_PAGE ? elements.size() : KEY_NOT_FOUND);
		}
	}
	
	private int degree;
	private Node root = null;
	public BTree(int degree) {
		this.degree = degree;
		root = new Node(Node.LEAF_PAGE);
		
	}
	public vid insert(Comparable element) {
		Node leftSibling = null;
		Node rightSibling = null;
		
		Node node = findLeafNode(element);
		
	}
	private Node findLeafNode(Comparable element) {
		Node node = root;
		Comparable[] key = {null};
		
		while (node.nodetype != Node.LEAF_PAGE) {
			assert(!node.pointers.isEmpty());
			node = node.getPointer(node.findKeyInNode(element, key));
			
		}
		return node;
	}
}
